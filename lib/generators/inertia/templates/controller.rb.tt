<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]
  before_action :set_<%= plural_table_name %>, only: %i[ index ]

  # GET <%= route_url %>
  def index
		render inertia: "<%= controller_class_name %>/Index", props: {
			<%= plural_table_name %>: @<%= plural_table_name %>.as_json
		}
  end

  # GET <%= route_url %>/:id
  def show
		render inertia: "<%= controller_class_name %>/Show", props: {
			<%= singular_table_name %>: @<%= singular_table_name %>.as_json
		}
  end

  # GET <%= route_url %>/new
  def new
		render inertia: "<%= controller_class_name %>/New", props: {
    	@<%= singular_table_name %> = <%= orm_class.build(class_name) %>
		}
  end

  # GET <%= route_url %>/:id/edit
  def edit
		render inertia: "<%= controller_class_name %>/Edit", props: {
			<%= singular_table_name %>: @<%= singular_table_name %>.as_json
		}
  end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    if @<%= orm_instance.save %>
      redirect_to <%= redirect_resource_name %>, notice: <%= %("#{human_name} was successfully created.") %>
    else
      render :new, status: :unprocessable_entity
    end
  end

  # PATCH/PUT <%= route_url %>/:id
  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= redirect_resource_name %>, notice: <%= %("#{human_name} was successfully updated.") %>
    else
      render :edit, status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/:id
  def destroy
    @<%= orm_instance.destroy %>
    redirect_to <%= index_helper %>_url, notice: <%= %("#{human_name} was successfully destroyed.") %>
  end

  private

	# Use callbacks to share common setup or constraints between actions.
	def set_<%= singular_table_name %>
		@<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
	end

	# Use callbacks to share common setup or constraints between actions.
	def set_<%= plural_table_name %>
		@<%= plural_table_name %> = <%= orm_class.all %>
	end

	# Only allow a list of trusted parameters through.
	def <%= "#{singular_table_name}_params" %>
		<%- if attributes_names.empty? -%>
		params.fetch(:<%= singular_table_name %>, {})
		<%- else -%>
		params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
		<%- end -%>
	end
end
<% end -%>