 require 'rails_helper'
 require_relative '../support/devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

def valid_attributes_hash(company)
  {
    name: Faker::Device.model_name ,
    model_number: Faker::Device.serial,
    qty: Faker::Number.number(digits: 1),
    min_qty: Faker::Number.number(digits: 1),
    cost: Faker::Commerce.price(range: 500..2000.0),
    purchased_at:Time.zone.yesterday.end_of_day,
    notes: Faker::Lorem.sentence,
    manufacturer: create(:manufacturer),
    category: create(:category),
    vendor: create(:vendor),
    company: company,
  }
end

RSpec.describe "/components", type: :request do

  let(:company) { create(:company) }
  
  # Component. As you add validations to Component, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { valid_attributes_hash(company) }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "POST /create" do
    login_admin

    context "with valid parameters" do
      it "creates a new Component" do
        expect {
          post components_url, params: { component: valid_attributes }
        }.to change(Component, :count).by(1)
      end

      it "redirects to the created component" do
        post components_url, params: { component: valid_attributes }
        expect(response).to redirect_to(component_url(Component.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Component" do
        expect {
          post components_url, params: { component: invalid_attributes }
        }.to change(Component, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post components_url, params: { component: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    login_admin

    context "with valid parameters" do
      let(:new_attributes) { valid_attributes_hash(company) }
      it "updates the requested component" do
        ap company
        ap valid_attributes
        ap new_attributes
        component = Component.create! valid_attributes
        patch component_url(component), params: { component: new_attributes }
        component.reload
        # skip("Add assertions for updated state")
      end

      it "redirects to the component" do
        component = Component.create! valid_attributes
        patch component_url(component), params: { component: new_attributes }
        component.reload
        expect(response).to redirect_to(component_url(component))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        component = Component.create! valid_attributes
        patch component_url(component), params: { component: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    login_admin

    it "destroys the requested component" do
      component = Component.create! valid_attributes
      expect {
        delete component_url(component)
      }.to change(Component, :count).by(-1)
    end

    it "redirects to the components list" do
      component = Component.create! valid_attributes
      delete component_url(component)
      expect(response).to redirect_to(components_url)
    end
  end
end
